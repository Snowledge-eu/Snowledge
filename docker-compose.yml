version: "3"

services:
  # Service pour l'application principale (snowledge-v1)
  # snowledge-v1:
  #   build:
  #     context: ./apps/snowledge-v1
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3005:3005
  #   volumes:
  #     - ./apps/snowledge-v1/.env:/app/.env
  #   environment:
  #     - NODE_ENV=development
  #   working_dir: /app
  #   command: npm run dev
  #   restart: unless-stopped
  #   networks:
  #     - snowledge_network
  # Service pour le frontend
  frontend:
    build:
      context: .
    ports:
      - 3000:3000
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - snowledge_network
  # Service pour le backend
  backend:
    build:
      context: .
    ports:
      - 4000:4000
    depends_on:
      - postgres
      - mongo
    restart: unless-stopped
    networks:
      - snowledge_network
  analyzer:
    build:
      context: .
      dockerfile: ./apps/analyzer/Dockerfile
    # volumes:
    #   - ./apps/analyzer:/app
    #   - ./llm_models.yaml:/app/standalone_version/llm/llm_models.yaml
    #   - ./prompt_models.yaml:/app/standalone_version/llm/prompt_models.yaml
    ports:
      - 8000:8000
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - mongo
    networks:
      - snowledge_network
  mongo:
    image: mongo
    container_name: snowlege-collector
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpass
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - snowledge_network
volumes:
  mongodb_data:
  mongodb_config:
networks:
  snowledge_network:
    external: true
