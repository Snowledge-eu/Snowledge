version: "3"

services:
  # Service pour le frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile.dev
    depends_on:
      - postgres
    # volumes:
    #   - ./apps/frontend:/app
    # - /app/node_modules
    # - ./apps/frontend/.env:/app/.env
    env_file:
      - .env.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:4000/api
      - NEXT_PUBLIC_ANALYSER_URL=http://localhost:8000/analyzer
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/snowledge
    networks:
      - snowledge_network
  # Service pour le backend
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.dev
    depends_on:
      - postgres
    volumes:
      # Monter le code source en préservant node_modules
      - ./apps/backend:/app
      - /app/node_modules
      - ./apps/backend/.env:/app/.env
    env_file:
      - .env.dev
    networks:
      - snowledge_network
    environment:
      - NODE_ENV=development
      - PGSQL_HOST=postgres
      - PGSQL_PORT=5432
      - PGSQL_DB=snowledge
      - PGSQL_NAME=postgres
      - PGSQL_PWD=postgres
      - MG_NAME=social_data
      - MG_HOST=mongo
      - MG_PORT=27017
      - ORIGIN_CORS=["localhost:3000"]
      - BACK_URL=http://localhost:4000/api
      - FRONT_URL=http://localhost:3000
  discord-harvester:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.dev
    command: npm run start:harvest
    depends_on:
      - backend
      - mongo
    volumes:
      # Monter le code source en préservant node_modules
      - ./apps/backend:/app
      - /app/node_modules
      - ./apps/backend/.env:/app/.env
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - PGSQL_HOST=postgres
      - PGSQL_PORT=5432
      - PGSQL_DB=snowledge
      - PGSQL_NAME=postgres
      - PGSQL_PWD=postgres
      - MG_NAME=social_data
      - MG_HOST=mongo
      - MG_PORT=27017
    networks:
      - snowledge_network
  # Service PostgreSQL
  postgres:
    image: postgres:16
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-snowledge}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backup:/backup
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - snowledge_network
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - snowledge_network
networks:
  snowledge_network:
    external: true

volumes:
  postgres-data:
