version: "3"

services:
  # Service pour le frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile.dev
    # volumes:
    #   - ./apps/frontend:/app
      # - /app/node_modules
      # - ./apps/frontend/.env:/app/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:4000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/snowledge
    networks:
      - snowledge_network
  # Service pour le backend
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.dev
    volumes:
      # Monter le code source en pr√©servant node_modules
      - ./apps/backend:/app
      - /app/node_modules
      - ./apps/backend/.env:/app/.env
    env_file:
      - .env.dev
    networks:
      - snowledge_network
    environment:
      - NODE_ENV=development
      - PGSQL_HOST=postgres
      - PGSQL_PORT=5432
      - PGSQL_DB=snowledge
      - PGSQL_NAME=postgres
      - PGSQL_PWD=postgres
      - MG_NAME=social_data
      - MG_HOST=mongo
      - MG_PORT=27017
      - MG_USER=admin
      - MG_PASSWORD=adminpass
  analyzer:
    build:
      context: .
      dockerfile: ./apps/analyzer/Dockerfile.dev
    environment:
      - MG_NAME=social_data
      - MG_HOST=localhost
      - MG_PORT=27017
      - MG_USER=admin
      - MG_PASSWORD=adminpass
  pgadmin:
    image: dpage/pgadmin4 
    restart: always 
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com 
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4 
    ports: 
      - '5050:80' 
    depends_on: 
      - postgres
    networks:
      - snowledge_network

networks:
  snowledge_network:
    external: true