import { useEffect } from "react";
import {
  processAnalysisData,
  getDataFields,
  hasAnalysisData,
  generateResultKey,
  isFreeTextResponse,
} from "../utils/dataProcessing";
import { sortFieldsByImportance } from "../utils/fieldConfig";

// ============
// Hook pour la logique mÃ©tier des donnÃ©es d'analyse
// ============

export const useAnalysisData = (result: any) => {
  // GÃ©nÃ©rer une clÃ© unique pour forcer le re-render
  const resultKey = generateResultKey(result);

  // Debug: Diagnostiquer le problÃ¨me de cache
  // useEffect(() => {
  //   console.log("ðŸ”„ GenericResult - Component re-rendered with new result");
  //   console.log("ðŸ†” GenericResult - Result ID:", resultKey);
  //   console.log("ðŸ“Š GenericResult - Result type:", typeof result);
  //   console.log("ðŸ“Š GenericResult - Result keys:", Object.keys(result || {}));
  //   console.log("ðŸ“Š GenericResult - Full result object:", result);

  //   // VÃ©rifier si on a des donnÃ©es d'analyse
  //   const hasData = hasAnalysisData(result);
  //   console.log("ðŸ“Š GenericResult - Has analysis data:", hasData);
  // }, [resultKey, result]);

  // Traiter les donnÃ©es d'analyse
  const structuredData = processAnalysisData(result);
  const dataFields = sortFieldsByImportance(getDataFields(structuredData));
  console.log("ðŸ“Š GenericResultEEREREREERERERER - Data feields:", dataFields);

  // VÃ©rifier si c'est une rÃ©ponse libre
  const isFreeText = isFreeTextResponse(result);

  // VÃ©rifier si on a des donnÃ©es d'analyse
  const hasData = hasAnalysisData(result);

  return {
    resultKey,
    structuredData,
    dataFields,
    isFreeText,
    hasData,
  };
};
