name: Deploy Frontend

on:
  push:
    branches:
      - staging
      - main

permissions:
  contents: read
  deployments: write

jobs:
  deploy-v1-vercel:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip vercel]') }}
    defaults:
      run:
        working-directory: ./apps/snowledge-v1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Deploy migrations to Preview
        if: github.ref == 'refs/heads/staging'
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}

      - name: Deploy migrations to Production
        if: github.ref == 'refs/heads/main'
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/snowledge-v1
          github-comment: false

  deploy-ovh:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ovh]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Déploiement sur OVH (staging)
        if: github.ref == 'refs/heads/staging'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            if [ ! -d "/home/debian/Snowledge/.git" ]; then
              git clone https://github.com/Snowledge-eu/Snowledge.git /home/debian/Snowledge
            fi
            cd /home/debian/Snowledge
            git fetch origin
            git checkout staging
            git reset --hard origin/staging
            echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}" > .env
            echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
            echo "OVH_AI_ENDPOINTS_ACCESS_TOKEN=${{ secrets.OVH_AI_ENDPOINTS_ACCESS_TOKEN }}" >> .env
            echo "MG_USER=${{ secrets.MG_USER }}" >> .env
            echo "MG_PASSWORD=${{ secrets.MG_PASSWORD }}" >> .env
            echo "PGSQL_NAME=${{ secrets.PGSQL_NAME_PREPROD }}" >> .env
            echo "PGSQL_PWD=${{ secrets.PGSQL_PWD_PREPROD }}" >> .env
            echo "PGSQL_HOST=postgresql-02aff275-o9835f167.database.cloud.ovh.net" >> .env
            echo "PGSQL_PORT=20184" >> .env
            echo "PGSQL_DB=defaultdb" >> .env
            echo "PGSQL_SSL=true" >> .env
            echo "BACK_URL=https://test.snowledge.eu/api" >> .env
            echo "FRONT_URL=https://test.snowledge.eu" >> .env
            echo "NEXT_PUBLIC_BACKEND_URL=https://test.snowledge.eu/api" >> .env
            echo "NEXT_PUBLIC_ANALYSER_URL=https://test.snowledge.eu:8000" >> .env
            echo "ORIGIN_CORS= ["https://test.snowledge.eu"]" >> .env
            echo "${{ secrets.PGSQL_SSL_CERTIFICATE }}" >> pg-ca.crt
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build

      - name: Déploiement sur OVH (prod)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            if [ ! -d "/home/debian/Snowledge/.git" ]; then
              git clone https://github.com/Snowledge-eu/Snowledge.git /home/debian/Snowledge
            fi
            cd /home/debian/Snowledge
            git fetch origin
            git checkout main
            git reset --hard origin/main
            echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}" > .env
            echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
            echo "OVH_AI_ENDPOINTS_ACCESS_TOKEN=${{ secrets.OVH_AI_ENDPOINTS_ACCESS_TOKEN }}" >> .env
            echo "MG_USER=${{ secrets.MG_USER }}" >> .env
            echo "MG_PASSWORD=${{ secrets.MG_PASSWORD }}" >> .env
            echo "BACK_URL=https://hi.snowledge.eu/api" >> .env
            echo "FRONT_URL=https://hi.snowledge.eu" >> .env
            echo "NEXT_PUBLIC_BACKEND_URL=https://hi.snowledge.eu/api" >> .env
            echo "NEXT_PUBLIC_ANALYSER_URL=https://hi.snowledge.eu:8000" >> .env
            echo "ORIGIN_CORS= ["https://hi.snowledge.eu"]" >> .env
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
